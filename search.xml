<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java Used in LeetCode</title>
    <url>/2021/03/02/Java-Used-in-LeetCode/</url>
    <content><![CDATA[<p>记录在LeetCode上刷题过程中遇到的java基础知识</p>
<p><a id="more"></a></p>
<h4 id="java数组">java数组</h4>
<ul>
<li>如何初始化</li>
<li>循环操作</li>
<li>数组长度 length是数组的一个属性。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray; <span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">int</span>[] intArray2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>]; <span class="comment">//初始化，需要确定数组长度</span></span><br><span class="line"><span class="keyword">int</span> [] intArray2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">// 声明初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; nums.length&gt;;i++)&#123; </span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>拷贝 下面的结果是在jshell=11.0.3版本 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] a &#x3D; new int[]&#123;1,2,3&#125;; &#x2F;&#x2F;a &#x3D;&#x3D;&gt; int[3] &#123; 1, 2, 3 &#125;</span><br><span class="line">int[] b &#x3D; a; &#x2F;&#x2F;b &#x3D;&#x3D;&gt; int[3] &#123; 1, 2, 3 &#125;</span><br><span class="line">b[0] &#x3D; 4;</span><br><span class="line">a;b; </span><br><span class="line">&#x2F;&#x2F; a&#x3D;&#x3D;&gt; int[3] &#123; 4, 2, 3 &#125; ; a&#x3D;&#x3D;&gt; int[3] &#123; 4, 2, 3 &#125;</span><br></pre></td></tr></table></figure> 上面的是浅拷贝 深度拷贝的简单思路是通过循环实现，在循环里面赋值，这样修改拷贝数组就不会影响原数组（针对对象的实现更加复杂，在这里先考虑基本类型的拷贝）。下面用字符串为例，调用<code>System.arraycopy</code>实现 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> String[] s1 = &#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="comment">// s1 ==&gt; String[2] &#123; &quot;apple&quot;, &quot;banana&quot; &#125;</span></span><br><span class="line"> String[] s2 = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line"><span class="comment">//s2 ==&gt; String[4] &#123; null, null, null, null &#125;</span></span><br><span class="line"> System.arraycopy(s1,<span class="number">0</span>,s2,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// s2 ==&gt; String[4] &#123; &quot;apple&quot;, &quot;banana&quot;, null, null &#125;</span></span><br><span class="line"> s2[<span class="number">0</span>]=<span class="string">&quot;orange&quot;</span></span><br><span class="line"> s1;s2;</span><br><span class="line"><span class="comment">// s1 ==&gt; String[2] &#123; &quot;apple&quot;, &quot;banana&quot; &#125;</span></span><br><span class="line"><span class="comment">// s2 ==&gt; String[4] &#123; &quot;orange&quot;, &quot;banana&quot;, null, null &#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="java字符串">java字符串</h4>
<ul>
<li>长度 <code>length()</code>是java String的方法</li>
<li>子串 <code>substring(int beginIndex, int endIndex);</code>包括beginIndex, 不包括endIndex;</li>
<li>字符 <code>charAt(int index)</code>取指定下标的字符 下标范围：<code>[0, length()-1]</code>, 两边都包括 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String st = <span class="string">&quot;apple&quot;</span></span><br><span class="line">st.length() <span class="comment">// 5</span></span><br><span class="line">st.charAt(<span class="number">0</span>) <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line">st.substring(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">// &quot;app&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="java-hashmap">java HashMap</h4>
<ul>
<li>初始化</li>
<li>K,V取值</li>
<li>遍历 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap; <span class="comment">// 引入 HashMap 类</span></span><br><span class="line">HashMap&lt;Integer, String&gt; fruit = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">fruit.put(<span class="number">1</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line">fruit.put(<span class="number">2</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">fruit.put(<span class="number">3</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line"><span class="comment">//  fruit ==&gt; &#123;1=apple, 2=orange, 3=banana&#125;</span></span><br><span class="line">fruit.put(<span class="number">3</span>, <span class="string">&quot;bus&quot;</span>);</span><br><span class="line"><span class="comment">// fruit ==&gt; &#123;1=apple, 2=orange, 3=bus&#125;</span></span><br><span class="line">fruit.replace(<span class="number">3</span>,<span class="string">&quot;bus&quot;</span>, <span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="comment">// fruit ==&gt; &#123;1=apple, 2=orange, 3=banana&#125;</span></span><br><span class="line">fruit.get(<span class="number">1</span>); <span class="comment">// &quot;apple&quot;</span></span><br><span class="line">fruit.containsKey(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////  for each</span></span><br><span class="line"><span class="keyword">for</span> (Integer i : fruit.keySet()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key: &quot;</span> + i + <span class="string">&quot; value: &quot;</span> + fruit.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 6-7 </title>
    <url>/2021/03/03/LeetCode-6-7/</url>
    <content><![CDATA[<p>LeetCode 6-7题的算法记录 Z 字形变换 整数反转 <a id="more"></a></p>
<h3 id="总结与收获">总结与收获</h3>
<p>java基础知识更加熟悉但是算法问题还是没有解决思路。 仍然需要努力。 今天的问题LeetCode给的难度等级不高，但是参考了解析之后做起来还是很吃力，而且中间针对边界值问题处理很吃力，花费了很长的时间检查程序解决Bug。 - 数字处理技巧 整型数字按位读取方法 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// int x = 123;</span></span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> pop = x % <span class="number">10</span>;<span class="comment">// 每一位，从右向左, 依次是3,2,1</span></span><br><span class="line">    x  = x/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="z-字形变换">6. Z 字形变换</h3>
<p><a href="https://leetcode-cn.com/problems/zigzag-conversion/description/">LeetCode 题目描述</a></p>
<p>#### 暴力法 建立矩阵然后从按列读变成按行读</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numRows == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.length());</span><br><span class="line">        <span class="comment">// init matrix, index-&gt; r,c</span></span><br><span class="line">        <span class="keyword">int</span> paired_size = (numRows-<span class="number">1</span>) * <span class="number">2</span>; <span class="comment">//V size</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">char</span>[numRows][(s.length()/paired_size + <span class="number">1</span>)*(numRows-<span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> r=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> paired_length = i / paired_size;</span><br><span class="line">            <span class="keyword">int</span> left_length = i-paired_size*paired_length;</span><br><span class="line">            <span class="comment">// |</span></span><br><span class="line">            <span class="keyword">if</span>(left_length &lt; numRows)&#123;</span><br><span class="line">                r = left_length;</span><br><span class="line">                c = paired_length * (numRows-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// /</span></span><br><span class="line">            <span class="keyword">if</span>(left_length&gt;numRows)&#123;</span><br><span class="line">                r = paired_size - left_length;</span><br><span class="line">                c = paired_length * (numRows-<span class="number">1</span>) + left_length-numRows;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left_length == numRows)&#123;</span><br><span class="line">                r = paired_size -left_length;</span><br><span class="line">                c = paired_length * (numRows-<span class="number">1</span>) +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            matrix[r][c] = s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// r,c -&gt; index</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt; matrix.length;r++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt; matrix[<span class="number">0</span>].length;c++)&#123;</span><br><span class="line">                 <span class="keyword">if</span>( matrix[r][c] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">                      sb.append(matrix[r][c]);</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="暴力法-去除矩阵操作转为行拼接">暴力法 去除矩阵操作，转为行拼接</h4>
<p>参考 <a href="https://leetcode-cn.com/problems/zigzag-conversion/solution/z-zi-xing-bian-huan-by-leetcode/">LeetCode 官方题解</a>对比猜测上面矩阵的循环花费的时间很长（index-&gt;r,c 是<span class="math inline">\(O(s.length())\)</span>的时间复杂度，r,c -&gt; index是<span class="math inline">\(O(m*n)\)</span>的时间复杂度，矩阵中有很多空元素，所以<span class="math inline">\(m*n\)</span>远大于<span class="math inline">\(s.length()\)</span>）参考官方的解法，将中间的表示从矩阵转换为行数组，降低时间花费。后来通过验证发现确实提高了速度。 <img src="https://gitee.com/chenryi/image_for_notes/raw/master/20210303221907.png" alt="LeetCode 时间花费对比" /> 第二行采用矩阵形式，运行时间为45ms，第一行是采用行数组的形式，运行时间8ms，提高了很多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(numRows == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.length());</span><br><span class="line">        List&lt;StringBuilder&gt; sbs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numRows; i++)&#123;</span><br><span class="line">            sbs.add(<span class="keyword">new</span> StringBuilder());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// init matrix, index-&gt; r,c</span></span><br><span class="line">        <span class="keyword">int</span> paired_size = (numRows-<span class="number">1</span>) * <span class="number">2</span>; <span class="comment">//V size</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//char[][] matrix = new char[numRows][(s.length()/paired_size + 1)*(numRows-1)];</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> r=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> paired_length = i / paired_size;</span><br><span class="line">            <span class="keyword">int</span> left_length = i-paired_size*paired_length;</span><br><span class="line">            <span class="comment">// |</span></span><br><span class="line">            <span class="keyword">if</span>(left_length &lt; numRows)&#123;</span><br><span class="line">                r = left_length;</span><br><span class="line">                c = paired_length * (numRows-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// /</span></span><br><span class="line">            <span class="keyword">if</span>(left_length&gt;numRows)&#123;</span><br><span class="line">                r = paired_size - left_length;</span><br><span class="line">                c = paired_length * (numRows-<span class="number">1</span>) + left_length-numRows;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left_length == numRows)&#123;</span><br><span class="line">                r = paired_size -left_length;</span><br><span class="line">                c = paired_length * (numRows-<span class="number">1</span>) +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//  matrix[r][c] = s.charAt(i);</span></span><br><span class="line">            sbs.get(r).append(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(StringBuilder ts: sbs)&#123;</span><br><span class="line">            sb.append(ts);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整数反转">7. 整数反转</h3>
<p><a href="https://leetcode-cn.com/problems/reverse-integer/description/">LeetCode 题目描述</a></p>
<p>参考 <a href="https://leetcode-cn.com/problems/reverse-integer/solution/zheng-shu-fan-zhuan-by-leetcode/">LeetCode 官方题解</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// split</span></span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">if</span>(result &gt; Integer.MAX_VALUE/<span class="number">10</span> || (result == Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; x/<span class="number">10</span> &gt; <span class="number">7</span>))&#123; result=<span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(result &lt; Integer.MIN_VALUE/<span class="number">10</span> || (result == Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; x/<span class="number">10</span> &lt;-<span class="number">8</span>))&#123; result=<span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line"></span><br><span class="line">            result = result * <span class="number">10</span> + x%<span class="number">10</span>;</span><br><span class="line">            x  = x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/18/hello-world/</url>
    <content><![CDATA[<p>Hello word for Hexo. <a id="more"></a> Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo和GitHub Pages 搭建个人博客</title>
    <url>/2020/08/18/hexo-github-blog/</url>
    <content><![CDATA[<p>在github上搭建博客的过程的记录。</p>
<p><a id="more"></a></p>
<h2 id="环境说明">环境说明</h2>
<ul>
<li>git 官网：<a href="https://git-scm.com/">https://git-scm.com/</a></li>
<li>node 官网：<a href="http://nodejs.cn/">http://nodejs.cn/</a> 下载的方法见官网链接，在此就不多说了。其中git可以选择github客户端等而不是命令行。 建议通过镜像网站下载软件，否则下载速度非常慢，可以考虑<a href="https://npm.taobao.org/mirrors/">淘宝镜像</a>。 系统：windows 10</li>
</ul>
<h2 id="步骤">步骤</h2>
<ol type="1">
<li><p>注册github账号 因为使用github提供的 GitHub Pages 服务，所以需要先注册github账号，如果已有可以跳过这部分内容， 如果没有账号的话，可以通过邮箱在github官网上注册账号。</p></li>
<li><p>配置github SSH key 使用的hexo是通过git来将文件传递到github仓库中的，为了避免每次提交的时候都要验证身份（输入邮箱密码），通过配置sshkey来偷懒，非必须。具体步骤如下： 2.1 生成key 运行命令 ssh-keygen, （git安装后自带的程序）,全部默认，会在用户目录的.ssh目录（隐藏文件夹）下生成 id_rsa, id_rsa.pub文件， 打开id_rsa.pub就是后面需要的key 2.2 保存到github账户中 登录github账号，选择：setting --&gt; SSH and GPG keys，选择"new ssh key"，然后将id_rsa.pub的内容复制到“key”文本框中，保存。</p></li>
<li><p>GitHub Pages使用 将GitHub Pages作为一个静态网站托管平台，能够方便别人的访问，同时利用git来管理自己的博客内容。 3.1 创建仓库 创建 github公开仓库，仓库名称为 <code>&lt;用户名&gt;.github.io</code>，选择带有Readme.md 3.2 打开GitHub Pages服务 在浏览器中打开建立的仓库，选择仓库的setting --&gt; options，然后选择 GitHub Pages，（这里 GitHub Pages在页面的底部，不是另一个页面），选择branch为master，保存。当提示<code>Your site is published at ...</code> 时说明成功。打开上面的链接，就能够看到Readme.md的相关内容。 3.3 使用 到这里，就利用GitHub Pages建立了一个静态网页，我们可以通过在这个仓库中手动增加静态网页的方式来完成内容的展示，但是非常麻烦，所以下面介绍Hexo这一博客框架来简化操作。</p></li>
<li><p>Hexo使用 Hexo的官网是<a href="https://hexo.io/zh-cn/index.html">hexo.io</a>，是一个博客框架。主要特点是插件丰富，功能足够。主要用到的功能有： 自动部署，在本地写Markdown文件，然后通过简单的一行命令就能够转换为html文件并且部署到githubpages中。之后再结合相关的设置和插件来修改界面外观等。 4.1 安装 建议使用镜像网站，比如：<a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">淘宝镜像</a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure> 4.2 使用 hexo常用命令有：<code>generate, deploy, server, new</code>等，可以参考官网来找到更多的命令。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd your_project # 进入一个空文件夹，作为项目的根目录</span><br><span class="line">hexo init #初始化，生成模板文件和代码</span><br><span class="line">npm install # 安装依赖的包</span><br></pre></td></tr></table></figure> 上面就建立成功了一个博客网站的demo，可以通过<code>hexo g</code>, <code>hexo s</code>,在本地部署来看一下网站的效果。</p>
<p>4.3 写博客 每次写博客并且生成静态网页的命令如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd your_project</span><br><span class="line">hexo new &quot;this blog name&quot;</span><br><span class="line">hexo g # 生成</span><br></pre></td></tr></table></figure></p>
<p>4.4 部署 上面完成了本地的部署，下面的任务就是将这个部署改为在GitHub Pages上部署。 安装部署的工具包<code>hexo-deployer-git</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd you_project</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure> 修改hexo配置，将部署改为git。将<code>&lt;you_project&gt;/_config.yml</code>文件最后的内容参考如下内容修改： <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: &lt;repository url&gt; #git@github.com:chenruyi/chenruyi.github.io.git</span><br><span class="line">  branch: [branch] #master</span><br></pre></td></tr></table></figure> 每次写完博客之后，通过<code>hexo clean</code>,<code>hexo deploy</code>命令来更新并部署内容。</p></li>
<li><p>继续美化 现在的博客已经完成了主要的部分，还可以继续美化。。。。。</p></li>
<li><p>下面记录一些常见到修改和配置（不定期更新）</p></li>
</ol>
<ul>
<li>设置首页不显示全文，只显示摘要 采用的方法是使用<code>&lt;!-- more --&gt;</code>标签，在<code>---</code>（后一个）和<code>&lt;!-- more --&gt;</code>之间的内容是摘要，在首页上显示，并且自动添加<code>Read More</code>跳转到博客内容页面，注意的是这部分摘要在这篇blog中也会出现。 使用方法：正常写blog中的内容，并且在开头增加一个摘要部分。</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>java base input/output</title>
    <url>/2020/11/04/java-base-20-11-04/</url>
    <content><![CDATA[<p>java 的基础知识，java的输入输出的操作 <a id="more"></a></p>
<h2 id="输入输出">输入输出</h2>
<p>在这里，主要是指命令行的输入和输出的处理，包括：1. 输入参数 2. 命令行处理程序 参考：</p>
<p><a href="https://www.runoob.com/java/java-files-io.html">菜鸟教程</a> <a href="https://www.runoob.com/java/java-scanner-class.html">菜鸟教程</a></p>
<h3 id="输入参数处理">输入参数处理</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(String arg: args)&#123;</span><br><span class="line">        System.out.println(arg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上所示，针对所有的输入参数可以按照这种方法来依次读入然后处理。</p>
<h3 id="命令行输入">命令行输入</h3>
<p>在命令行中输入的处理是比较麻烦的，主要的采用<code>BufferedReader, Scanner</code>两个类来读入输入的字符然后处理。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="comment">// 使用 System.in 创建 BufferedReader</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="comment">// 输出提示信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输入字符, 按下 &#x27;q&#x27; 键退出。&quot;</span>);</span><br><span class="line">        <span class="comment">// 循环读取，直到输入&#x27;q&#x27;</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            c = (<span class="keyword">char</span>) br.read();</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125; <span class="keyword">while</span> (c != <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> 上面的程序会一直读取输入然后输出 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (scan.hasNextDouble()) &#123;</span><br><span class="line">        <span class="keyword">double</span> x = scan.nextDouble();</span><br><span class="line">        m = m + <span class="number">1</span>;</span><br><span class="line">        sum = sum + x;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    System.out.println(m + <span class="string">&quot;个数的和为&quot;</span> + sum);</span><br><span class="line">    System.out.println(m + <span class="string">&quot;个数的平均值是&quot;</span> + (sum / m));</span><br><span class="line">    scan.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 建议采用第二种方法，采用<code>Scanner</code>类来完成输入和输出的处理，一方面是Scanner类提供了一些类型转换的方法，比如上面所示的<code>nextDouble</code>能够将输入转换为指定类型。当然实际上java的命令行的输入还是比较少的。</p>
<h3 id="命令行处理程序">命令行处理程序</h3>
<p>以ls为例，在java中如何实现这个功能（部分实现）。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LSDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path=<span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入查询的目录:&quot;</span>);</span><br><span class="line">        Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        path=scan.nextLine();</span><br><span class="line">        File dir = <span class="keyword">new</span> File(path);</span><br><span class="line">        String[] child = dir.list();</span><br><span class="line">        <span class="keyword">if</span>(child == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;目录为空&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(String dirName: child)&#123;</span><br><span class="line">                System.out.println(dirName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 编译运行 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version </span><br><span class="line">&#x2F;&#x2F; openjdk version &quot;9-internal&quot;</span><br><span class="line">javac LSDemo.java</span><br><span class="line">java LSDemo</span><br></pre></td></tr></table></figure> 得到结果（部分截图） <img src="https://gitee.com/chenryi/image_for_notes/raw/master/20210305224508.png" alt="Ubuntun openjdk9绝对路径测试结果" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/20210305224701.png" alt="Ubuntun openjdk9相对路径测试结果" /></p>
<h2 id="文件操作">文件操作</h2>
<p>文本文件的读写操作，常见的几种读写方法，推荐使用<code>BuffredReader,BufferedWriter</code> 注意的是要注意处理<code>IOException</code>。 另外，需要注意的是关于编码问题，基于字符和buf的方法有额外的参数可以实现特定的文件编码处理。</p>
<h3 id="fileinputstreamfileoutputstream">FileInputStream,FileOutputStream</h3>
<p>字节读写 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// should import java.io.* packages.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RW1</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(filePath);</span><br><span class="line">    fos.write(<span class="string">&quot;FileOutputStream output methods.&quot;</span>.getBytes());</span><br><span class="line">    fos.close();</span><br><span class="line">    <span class="comment">// read</span></span><br><span class="line">    FileInputStream fis =<span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">    <span class="keyword">byte</span>[] bys = bew <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">while</span>(file.read(bys,<span class="number">0</span>m bys.length)!=-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// convert byte to string.</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bys));</span><br><span class="line">    &#125;</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="filewriterfilereader">FileWriter,FileReader</h3>
<p>字符读写 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// should import java.io.* packages.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RW2</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write</span></span><br><span class="line">    FileWriter writer = <span class="keyword">new</span> FileWriter(filePath);</span><br><span class="line">    writer.write(<span class="string">&quot;FileWriter output methods.&quot;</span>.getBytes());</span><br><span class="line">    writer.close();</span><br><span class="line">    <span class="comment">// read, using try with </span></span><br><span class="line">    <span class="keyword">try</span>(FileReader reader = <span class="keyword">new</span> FileReader(filePath))&#123;</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="keyword">while</span>((c = reader.read() != -<span class="number">1</span>))&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="buffredreaderbufferedwriter">BuffredReader,BufferedWriter</h3>
<p>字符按行读写 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// should import java.io.* packages.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RW3</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write</span></span><br><span class="line">    FileWriter writer = <span class="keyword">new</span> FileWriter(filePath);</span><br><span class="line">    BufferedWriter bufWriter = <span class="keyword">new</span> BufferedWriter(writer);</span><br><span class="line">    bufWriter.write(<span class="string">&quot;BufferWriter write methods.&quot;</span>);</span><br><span class="line">    bufWriter.close();</span><br><span class="line">    <span class="comment">// read</span></span><br><span class="line">   <span class="keyword">try</span>(BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath));) &#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">while</span> ((str = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h3 id="练习题">练习题</h3>
<p><a href="https://docs.oracle.com/javase/tutorial/essential/io/QandE/questions.html">Oracle java tutorial</a></p>
<p>参考: <a href="https://docs.oracle.com/javase/tutorial/essential/io/QandE/CountLetter.java">oracle CountLetter</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java mysql redis ubuntu install</title>
    <url>/2021/03/06/java-mysql-redis-ubuntu-install/</url>
    <content><![CDATA[<p>Ubuntu 20.04 java开发部署环境配置，主要是 java11, mysql, redis的安装和配置. <a id="more"></a></p>
<h3 id="java">java</h3>
<p>jdk版本: openjdk11 安装命令 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-11-jre-headless</span><br></pre></td></tr></table></figure> 安装后使用helloworld.java检测环境配置 &gt; 注意的是java 11提供了<a href="https://openjdk.java.net/jeps/330">JEP 330: Launch Single-File Source-Code Programs</a>使用单个命令来运行.java文件。 &gt; 源代码在内存中编译，然后由解释器执行，而不需要在磁盘上生成.class 文件了。但是，该特性仅限于保存在单个源文件中的代码。不能在同一个运行编译中添加其他源文件。为了满足这个限制，所有的类都必须在同一个文件中定义，不过它对文件中类的数量没有限制，并且类既可声明为公共类，也可以不是，因为只要它们在同一个源文件中就没关系。源文件中声明的第一个类将被提取出来作为主类，我们应该将 main 方法放在第一个类中。所以类的顺序很重要。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">java HelloWorld.java &#x2F;&#x2F; if using jdk8: javac HelloWorld.java; java HelloWorld;</span><br></pre></td></tr></table></figure>
<p>结果截图 <img src="https://gitee.com/chenryi/image_for_notes/raw/master/20210306221844.png" alt="Java HelloWorld" /></p>
<h3 id="mysql">mysql</h3>
<p>参考<a href="https://www.itcoder.tech/posts/how-to-install-mysql-on-ubuntu-20-04/?spm=a2c4e.10696291.0.0.6b6419a4epAPfn">ITCoder</a> 安装mysql，运行下面的命令 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure> 检查mysql是否成功启动 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure> 截图如下 <img src="https://gitee.com/chenryi/image_for_notes/raw/master/20210306222652.png" alt="mysql status" /></p>
<p>mysql 简单配置 运行mysql_secure_installation（安装mysql时也会安装） <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure> 上面的命令会提示设置密码验证策略和设置root用户的密码。 为了能够通过java来访问数据库，采用增加一个专门用来完成数据库的访问的用户。具体的操作如下。 首先进入mysql shell 执行环境（运行<code>mysql -u root -p</code>命令） <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 增加用户</span><br><span class="line">CREATE USER &#39;test&#39;@&#39;%&#39; IDENTIFIED BY &#39;1234&#39;; </span><br><span class="line">&#x2F;&#x2F; 用户名:test 密码:1234(示例，需要符合之前设置的密码验证策略), &#39;%&#39;指任意电脑能够远程登录，&#39;localhost&#39;:只能本地登录</span><br><span class="line">&#x2F;&#x2F;修改权限</span><br><span class="line">&#x2F;&#x2F; 模板: grant 权限 on 数据库对象 to 用户</span><br><span class="line">grant all on *.* to &#39;test&#39;@&#39;%&#39;; </span><br></pre></td></tr></table></figure></p>
<h3 id="redis">redis</h3>
<p>参考<a href="https://developer.aliyun.com/article/645910">阿里云开发社区</a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装redis服务</span><br><span class="line">sudo apt install redis-server</span><br></pre></td></tr></table></figure> 测试是否安装成功 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 检查是否启动redis服务，运行下面命令，应该提示端口被占用</span><br><span class="line">redis-server</span><br><span class="line">ps -aux | grep redis</span><br></pre></td></tr></table></figure> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/20210306225149.png" alt="成功启动" /></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>linux</tag>
        <tag>mysql</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1-5 </title>
    <url>/2021/03/02/LeetCode-1-5/</url>
    <content><![CDATA[<p>LeetCode 1-5题的算法记录 最长回文子串，寻找两个正序数组的中位数，无重复字符的最长子串，两数相加，两数之和 <a id="more"></a></p>
<h3 id="基本知识">基本知识</h3>
<p>java 1.8.0 java基础知识（数组）和Collections</p>
<h3 id="总结与收获">总结与收获</h3>
<ul>
<li><p>java的基础知识 java中的基础知识，主要是指数组操作（创建数组，复制数组等），集合操作（HashMap的初始化和查找），循环操作 基础的数据结构是数组，主要要掌握的数组的循环操作。</p></li>
<li><p>双指针方法解决部分问题 今天的题目基本上都可以找到<span class="math inline">\(O(n^2)\)</span>的暴力法解决，这类问题的主要方法就是通过两个指针的移动来完成条件的查找，也是其他的解决问题的基础。</p></li>
</ul>
<h3 id="两数之和">1. 两数之和</h3>
<p><a href="https://leetcode-cn.com/problems/two-sum/">LeetCode 题目描述</a> #### 暴力法,双指针 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span>[] result_index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">boolean</span> succeed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// O(n^2)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length &amp;&amp; !succeed;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.length &amp;&amp; !succeed; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">                        succeed = <span class="keyword">true</span>;</span><br><span class="line">                        result_index[<span class="number">0</span>] = i&gt;j?j:i;</span><br><span class="line">                        result_index[<span class="number">1</span>] = i&gt;j?i:j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result_index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="hashmap方法">HashMap方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result_index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// hash</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; htmp = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="comment">// init map</span></span><br><span class="line">        <span class="comment">// k: nums[i], v: i, index of target-nums[i] in nums;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(htmp.containsKey( target-nums[i]))&#123;</span><br><span class="line">                result_index[<span class="number">0</span>] = htmp.get(target-nums[i]);</span><br><span class="line">                result_index[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            htmp.put(nums[i], i); <span class="comment">// put here to prevent resue the i</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result_index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="两数相加">2. 两数相加</h3>
<p><a href="https://leetcode-cn.com/problems/add-two-numbers/">[LeetCode 题目描述]</a> 细节问题，尤其是链表的操作（头插法和尾插法） #### 按位计算, 短的补0 参考<a href="https://leetcode-cn.com/problems/add-two-numbers/solution/2-liang-shu-xiang-jia-javamo-ni-by-maczh-7wpr/"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode res = <span class="keyword">null</span>;</span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 尾插法</span></span><br><span class="line">        <span class="keyword">int</span> cap = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> l1_val = l1!=<span class="keyword">null</span> ?  l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> l2_val = l2!=<span class="keyword">null</span> ?  l2.val : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">            sum = l1_val+l2_val+cap;</span><br><span class="line">            cap = sum/<span class="number">10</span>;</span><br><span class="line">            ListNode t = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(res == <span class="keyword">null</span>)&#123;</span><br><span class="line">                res = t;</span><br><span class="line">                head = t;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.next = t;</span><br><span class="line">                res = res.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l1!=<span class="keyword">null</span>)&#123; l1=l1.next;&#125;</span><br><span class="line">            <span class="keyword">if</span>(l2!=<span class="keyword">null</span>)&#123; l2=l2.next;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cap</span></span><br><span class="line">        <span class="keyword">if</span>(cap != <span class="number">0</span>)&#123;</span><br><span class="line">            res.next =  <span class="keyword">new</span> ListNode(cap);</span><br><span class="line">            res = res.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="无重复字符的最长子串">3. 无重复字符的最长子串</h3>
<p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/">[LeetCode 题目描述]</a> 细节问题，尤其是链表的操作（头插法和尾插法） #### 暴力，双指针 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> maxSubStringLength=<span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;s.length(); j++)&#123;</span><br><span class="line">                <span class="comment">// check if has repeat char</span></span><br><span class="line">                <span class="keyword">if</span>( hasRepeatChar(s,i,j))&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxSubStringLength = j-i+<span class="number">1</span> &gt; maxSubStringLength ?</span><br><span class="line">                                     j-i+<span class="number">1</span>: maxSubStringLength;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSubStringLength;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRepeatChar</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="comment">// include start and end</span></span><br><span class="line">        <span class="keyword">boolean</span>[] check_char_flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">            c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (check_char_flag[c]==<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            check_char_flag[c] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="寻找两个正序数组的中位数">4. 寻找两个正序数组的中位数</h3>
<p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/">LeetCode 题目描述</a> 对比了官网给的算法（提前结束）发现没有明显的性能提升，所以这里就完整采用两步的方法来操作，不采用取前第k小的值的算法来提前结束算法。 #### 暴力, 先合并 然后计算中位数 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// merge</span></span><br><span class="line">        <span class="keyword">int</span> [] merge_nums = <span class="keyword">new</span> <span class="keyword">int</span>[nums1.length+nums2.length]; </span><br><span class="line">        <span class="keyword">int</span> merge_length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums1.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> findMedianSortedArrays(nums2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums2.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> findMedianSortedArrays(nums1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums1.length &amp;&amp; j&lt;nums2.length )&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] &lt; nums2[j])&#123; </span><br><span class="line">                merge_nums[merge_length]=nums1[i]; </span><br><span class="line">                merge_length++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                merge_nums[merge_length]=nums2[j]; </span><br><span class="line">                merge_length++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums1.length)&#123;merge_nums[merge_length] = nums1[i]; merge_length++;i++;&#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;nums2.length)&#123;merge_nums[merge_length] = nums2[j]; merge_length++;j++;&#125;</span><br><span class="line">        <span class="keyword">return</span> findMedianSortedArrays(merge_nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1.length%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> (nums1[(nums1.length/<span class="number">2</span>)-<span class="number">1</span>] + nums1[nums1.length/<span class="number">2</span>]) * <span class="number">0.5</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nums1[nums1.length/<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 5. 最长回文子串 <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/description/">LeetCode 题目描述</a> #### 暴力，双指针 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> beginIndex=<span class="number">0</span>,endIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j = i + endIndex-beginIndex; j&lt;s.length(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(checkPalindromeSubString(s,i,j))&#123;</span><br><span class="line">                    <span class="keyword">if</span>( j-i &gt; endIndex-beginIndex)&#123;</span><br><span class="line">                        beginIndex=i;endIndex=j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> s.substring(beginIndex,endIndex+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPalindromeSubString</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123; </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> lc = s.charAt(i);</span><br><span class="line">        <span class="keyword">char</span> rc = s.charAt(j);</span><br><span class="line">        <span class="keyword">while</span>(lc == rc)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;=j)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lc = s.charAt(i);</span><br><span class="line">            rc = s.charAt(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="中心扩展">中心扩展</h4>
<p>参考 <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/">LeetCode 官方题解</a> <a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.md">labuladong github</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String res = s.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">           String st = palindrome(s, i, i);</span><br><span class="line">           <span class="keyword">if</span>(st.length() &gt; res.length())&#123;</span><br><span class="line">               res = st;</span><br><span class="line">           &#125;</span><br><span class="line">           st = palindrome(s, i, i+<span class="number">1</span>);</span><br><span class="line">           <span class="keyword">if</span> (st.length() &gt; res.length())&#123;</span><br><span class="line">               res = st;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">palindrome</span><span class="params">(String s, <span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span>&#123;</span><br><span class="line">        <span class="comment">// middle expand</span></span><br><span class="line">        <span class="keyword">while</span>( beginIndex&gt;=<span class="number">0</span> &amp;&amp; endIndex &lt; s.length() &amp;&amp; s.charAt(beginIndex) == s.charAt(endIndex))&#123;</span><br><span class="line">            beginIndex--; endIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(beginIndex+<span class="number">1</span>, endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 8-9 </title>
    <url>/2021/03/05/LeetCode-8-9/</url>
    <content><![CDATA[<p>LeetCode 8-9题的算法记录 Z 字形变换 回文数 <a id="more"></a></p>
<h3 id="总结与收获">总结与收获</h3>
<p>难度等级不高，但是容易出现Bug，第8题的中间没有详细考虑各种情况，没有建立状态机，考虑过程中比较简单，在提交过程中遇到了问题后还要耐心查找问题，可以考虑使用题解中的状态机的算法来解决问题，来减少出错。</p>
<h3 id="字符串转换整数-atoi">8. 字符串转换整数 (atoi)</h3>
<p><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">LeetCode 题目描述</a></p>
<h4 id="暴力法-分步解决">暴力法 分步解决</h4>
<p>按照描述，将问题分两步解决，1)找到合法数字（如果有）的字符串 2)将字符串转换为数字，初步尝试可以得到下面的程序。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> positive = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> pos_char_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> beginIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> endIndex = s.length();</span><br><span class="line">        <span class="comment">// skip ahead space</span></span><br><span class="line">        <span class="keyword">while</span>(beginIndex&lt;s.length() &amp;&amp; s.charAt(beginIndex)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            beginIndex++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(beginIndex&gt;=s.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// get num range </span></span><br><span class="line">        <span class="comment">// legal number</span></span><br><span class="line">        <span class="comment">// +/-...  ...</span></span><br><span class="line">        <span class="keyword">if</span>(s.charAt(beginIndex) == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">            positive = <span class="keyword">true</span>;</span><br><span class="line">            beginIndex++;</span><br><span class="line">            endIndex = beginIndex;</span><br><span class="line">            <span class="keyword">while</span>(endIndex&lt;s.length() &amp;&amp; s.charAt(endIndex) &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s.charAt(endIndex)&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                endIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(beginIndex)==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            positive = <span class="keyword">false</span>;</span><br><span class="line">            beginIndex++;</span><br><span class="line">            endIndex = beginIndex;</span><br><span class="line">            <span class="keyword">while</span>(endIndex&lt;s.length() &amp;&amp; s.charAt(endIndex) &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s.charAt(endIndex)&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                endIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(beginIndex) &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s.charAt(beginIndex)&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            endIndex = beginIndex;</span><br><span class="line">            <span class="keyword">while</span>(endIndex&lt;s.length() &amp;&amp; s.charAt(endIndex) &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s.charAt(endIndex)&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                endIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=beginIndex;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;=<span class="string">&#x27;9&#x27;</span>)&#123; <span class="comment">// number</span></span><br><span class="line">                <span class="comment">// check overflow</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  <span class="comment">// other char</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// convert str to int</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=beginIndex;i&lt;endIndex;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;=<span class="string">&#x27;9&#x27;</span>)&#123; <span class="comment">// number</span></span><br><span class="line">                <span class="comment">// check overflow</span></span><br><span class="line">                <span class="keyword">if</span>(positive)&#123;</span><br><span class="line">                    <span class="keyword">if</span>( result &gt; Integer.MAX_VALUE/<span class="number">10</span> || result == Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; c-<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">7</span>)&#123;</span><br><span class="line">                        result = Integer.MAX_VALUE; <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>( -result &lt; Integer.MIN_VALUE/<span class="number">10</span> || -result == Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; c-<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">8</span>)&#123;</span><br><span class="line">                        result = Integer.MIN_VALUE; <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                result = result * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> positive? result: -result ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="暴力法-双指针">暴力法 双指针</h4>
<p>再思考上面的程序，发现解决问题的思路不够清楚，上面的代码是在解决bug的过程中逐步调整得到的。仔细思考上面的算法，发现核心就是找到合法的数字字符串，后面就是将字符串转换为整数。找到合法的数字字符串这一步用双指针的算法解决，通过设置两个指针来标记开始和结尾。同时将<code>charAt</code>函数调用转化为<code>char[]</code>数组操作，应该也能提高一点性能。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] cs = s.toCharArray();</span><br><span class="line">        <span class="keyword">boolean</span> positive = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> pos_char_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> beginIndex = <span class="number">0</span>; <span class="comment">// skip space</span></span><br><span class="line">        <span class="keyword">int</span> endIndex = <span class="number">0</span>; <span class="comment">// skip space, skip &#x27;+&#x27;,&#x27;-&#x27;,0-9 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cs.length;i++)&#123;</span><br><span class="line">            <span class="comment">// beginIndex ++</span></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span>(cs[i]==<span class="string">&#x27; &#x27;</span> &amp;&amp; beginIndex==endIndex)&#123; <span class="comment">// skip ahead space</span></span><br><span class="line">                beginIndex++;endIndex++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cs[i]==<span class="string">&#x27;+&#x27;</span> &amp;&amp; beginIndex==endIndex)&#123;</span><br><span class="line">                positive = <span class="keyword">true</span>;</span><br><span class="line">                endIndex++;<span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cs[i]==<span class="string">&#x27;-&#x27;</span>  &amp;&amp; beginIndex==endIndex)&#123;</span><br><span class="line">                positive = <span class="keyword">false</span>;</span><br><span class="line">                endIndex++;<span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cs[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; cs[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                endIndex++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(beginIndex &gt;=cs.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// all space</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cs[beginIndex]==<span class="string">&#x27;+&#x27;</span> || cs[beginIndex]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            beginIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// convert str to int</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=beginIndex;i&lt;endIndex;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cs[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; cs[i] &lt;=<span class="string">&#x27;9&#x27;</span>)&#123; <span class="comment">// number</span></span><br><span class="line">                <span class="comment">// check overflow</span></span><br><span class="line">                <span class="keyword">if</span>(positive)&#123;</span><br><span class="line">                    <span class="keyword">if</span>( result &gt; Integer.MAX_VALUE/<span class="number">10</span> || result == Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; cs[i]-<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">7</span>)&#123;</span><br><span class="line">                        result = Integer.MAX_VALUE; <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>( -result &lt; Integer.MIN_VALUE/<span class="number">10</span> || -result == Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; cs[i]-<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">8</span>)&#123;</span><br><span class="line">                        result = Integer.MIN_VALUE; <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                result = result * <span class="number">10</span> + cs[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> positive? result: -result ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="回文数">9 回文数</h3>
<p><a href="https://leetcode-cn.com/problems/palindrome-number/">LeetCode 题目描述</a></p>
<p>简单的思路就是将数字先转化为字符串然后转化为字符串的回文判断问题。再简化一下，可以将数字转化为整形数组，数组元素是输入数的每位的数，按照这种思路可以得到下面的程序。 #### 暴力法 按位检查 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] x_i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//&#123;-1,-1,-1,-1,-1,-1,-1,-1,-1,-1&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// split to each char</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> p = x % <span class="number">10</span>;</span><br><span class="line">            x_i[length] = p;</span><br><span class="line">            length++;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x_i[i] != x_i[length-i-<span class="number">1</span>])&#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>记录librosa 安装的一个问题</title>
    <url>/2020/08/30/librosa0-7-numba0-50-error/</url>
    <content><![CDATA[<p>librosa和numba冲突导致到安装问题和和解决办法。</p>
<p><a id="more"></a></p>
<h2 id="librosa-使用了numba中修改的一个接口">librosa 使用了numba中修改的一个接口</h2>
<h3 id="具体的问题">具体的问题：</h3>
<p>librosa 安装中出现依赖性错误。numba更改了接口，但是librosa没有限制使用指定版本的numba，导致安装了新版的numba。</p>
<h4 id="出现问题版本记录">出现问题版本记录：</h4>
<p>librosa == 0.60 numba == 0.50.1</p>
<p>在命令行中使用下面的命令：<code>python -c "import librosa"</code> 出现下面报错信息：</p>
<p><img src="https://gitee.com/chenryi/image_for_notes/raw/master/librosa-numba-fixed.png" alt="报错信息" /> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;C:\Users\chenr\Anaconda3\lib\site-packages\librosa\__init__.py&quot;, line 12, in &lt;module&gt;</span><br><span class="line">    from . import core</span><br><span class="line">  File &quot;C:\Users\chenr\Anaconda3\lib\site-packages\librosa\core\__init__.py&quot;, line 109, in &lt;module&gt;</span><br><span class="line">    from .time_frequency import *  # pylint: disable&#x3D;wildcard-import</span><br><span class="line">  File &quot;C:\Users\chenr\Anaconda3\lib\site-packages\librosa\core\time_frequency.py&quot;, line 10, in &lt;module&gt;</span><br><span class="line">    from ..util.exceptions import ParameterError</span><br><span class="line">  File &quot;C:\Users\chenr\Anaconda3\lib\site-packages\librosa\util\__init__.py&quot;, line 71, in &lt;module&gt;</span><br><span class="line">    from . import decorators</span><br><span class="line">    from . import decorators</span><br><span class="line">  File &quot;C:\Users\chenr\Anaconda3\lib\site-packages\librosa\util\decorators.py&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    from numba.decorators import jit as optional_jit</span><br><span class="line">ModuleNotFoundError: No module named &#39;numba.decorators&#39;</span><br></pre></td></tr></table></figure> ### 问题原因： numba在0.49版本之后改变了接口，而librosa包没有严格限制numba的版本号 ### 解决办法 在github中有人已经提出这个问题，并且已经做出了修改，应该在librosa的0.8.0中改正了这个问题（没有测试）。<code>decorators.py</code>在0.8.0版本中删除了<code>optional_jit</code>的依赖。</p>
<h3 id="临时的解决办法如下">临时的解决办法如下：</h3>
<p>如果不想更新版本来解决问题，参考github中给出的issure的解决办法：<a href="https://github.com/bshall/librosa/commit/029dd47fd717073de877508db910155f0a384442">commit</a></p>
<p>1.打开 <code>&lt;envs&gt;/Lib/site-packages/librosa/util/decorator.py</code>文件， <code>&lt;envs&gt;</code>是librosa包所在环境的路径。 2. 将<code>decorator.py</code>的包导入修改为如下所示 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># from numba.decorators import jit as optional_jit</span><br><span class="line">import numba</span><br><span class="line">if (numba.__version__ &lt; &#39;0.49.0&#39;):</span><br><span class="line">    from numba.decorators import jit as optional_jit</span><br><span class="line">else:</span><br><span class="line">    from numba.core.decorators import jit as optional_jit</span><br></pre></td></tr></table></figure> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/librosa-numba-fixed.png" alt="改正成功" /></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>jitsi-meeting视频会议简单部署记录</title>
    <url>/2020/09/27/jitsi-meeting-install/</url>
    <content><![CDATA[<p>jitsi-meeting视频会议的服务器端的部署记录 <a id="more"></a></p>
<h2 id="jitsi-meeting视频会议部署">jitsi-meeting视频会议部署</h2>
<p>最近看到了jitsi-meeting视频会议的开源软件，提供了web的测试链接，试了一下，功能比较齐全，所以想尝试一下部署到自己的服务器上。搜到了几篇博客，但是部分的内容已经过时了，修改的配置文件的位置都发生了改变，部署过程中遇到了不少坑，所以记录下来。</p>
<h3 id="jitsi-meeting介绍">jitsi-meeting介绍</h3>
<p>jitsi-meeting是一个开源 （Apache） WebRTC JavaScript 应用程序，它使用<a href="https://github.com/jitsi/jitsi-videobridge">jitsi-videobridge</a>提供高质量、安全和可扩展的视频会议。 jitsi-meeting 前端可以在浏览器中运行，无需在额外安装。官网测试地址：<a href="https://meet.jit.si">https://meet.jit.si</a>。jitsi-meeting支持共享屏幕和窗口等操作。并且提供了安卓和ios的测试客户端。 详细介绍可以参考： 官网: <a href="https://jitsi.org/">https://jitsi.org/</a> github: <a href="https://github.com/jitsi/jitsi-meet">https://github.com/jitsi/jitsi-meet</a></p>
<p>官网上提供了3种安装方法，包括基于 Debian 的系统(Ubuntun)包管理器（apt）安装，Docker安装和源码安装，为了简单起见，在这里先进行apt安装，其他的方法等之后有时间再尝试。 官方提供部署和安装方法见：<a href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart">jitsi.github.io</a>，主要的安装配置说明都是从这里复制得到的。</p>
<h3 id="环境准备">环境准备</h3>
<ul>
<li>Ubuntun 16.04 服务器 在这里我使用的是阿里云服务器，也可以使用其他的云服务器，主要需要的条件是：公网ip，这样才能使用公网的ip来进入会议，如果没有只能在局域网内容进行测试。并且需要管理员权限。</li>
</ul>
<p>使用了阿里云服务器之后要开启相关的端口的访问权限，注意的是这是需要在阿里云的安全组规则管理界面进行设置的（在浏览器中）。需要开放的端口是：<code>80/tcp,443/tcp,4443/tcp,10000/udp</code>配置截图：</p>
<figure>
<img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_18-11-31.png" alt="80,443,4443,10000" /><figcaption aria-hidden="true">80,443,4443,10000</figcaption>
</figure>
<h3 id="部署步骤">部署步骤</h3>
<p>下面的安装过程一般都是需要管理员权限的，使用<code>root</code>用户或者在命令前增加<code>sudo</code>命令。 1. 安装nginx <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y nginx</span><br></pre></td></tr></table></figure> 检查nginx的情况 <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeeting-Snipaste_2020-09-27_15-31-04.png" alt="nginx成功启动" /></p>
<ol start="2" type="1">
<li><p>防火墙配置 使用<code>ufw</code>管理防火墙。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 80/tcp</span><br><span class="line">sudo ufw allow 443/tcp</span><br><span class="line">sudo ufw allow 4443/tcp</span><br><span class="line">sudo ufw allow 10000/udp</span><br><span class="line">sudo ufw allow 22/tcp</span><br><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure> 配置成功检查命令 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw status verbose</span><br></pre></td></tr></table></figure> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeeting-Snipaste_2020-09-27_15-36-57.png" alt="配置结果" /></p></li>
<li><p>安装jitsi-meeting 使用apt安装已经打包好的文件，主要的步骤是增加jitsimeeting的源，然后安装。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://download.jitsi.org/jitsi-key.gpg.key | sudo sh -c &#x27;gpg --dearmor &gt; /usr/share/keyrings/jitsi-keyring.gpg&#x27;</span><br><span class="line">echo &#x27;deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/&#x27; | sudo tee /etc/apt/sources.list.d/jitsi-stable.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> update all package sources</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeeting-Snipaste_2020-09-27_15-52-20.png" alt="apt update中显示有jitsimeeting源" /> 开始安装jitsimeeting，注意的是网络比较慢，中间经过多次的中断和重试，最后下载完成依赖并且等待输入<code>y</code>确认安装，输入公网ip地址然后等待完成。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install jitsi-meet</span><br></pre></td></tr></table></figure> 注意： 安装过程中需要输入服务器的地址可以是ip或者是域名等，在这里我用的是ip地址，在后续踩坑过程中没有找到修改ip地址的配置文件，所以输入的时候需要注意。 <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeeting-Snipaste_2020-09-27_16-03-52.png" alt="安装过程1" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-05-39.png" alt="输入ip" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-06-22.png" alt="ssl验证" /></p></li>
<li><p>修改配置文件 配置文件的修改原理主要是配置nginx。 官方的部署指南中说是自动配置的，但是我按照上面的步骤安装完成之后没有成功（访问ip之后没有进入会议界面），所以进行下面的修改，如果成功了可能不需要下面的配置。 检查出错的原因： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出全部的jitmeeting启动的service</span></span><br><span class="line">systemctl | grep ji</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查状态</span></span><br><span class="line">systemctl status jitsi-videobridge2.service</span><br><span class="line">systemctl status jicofo.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx状态</span></span><br><span class="line">systemctl status nginx.service</span><br></pre></td></tr></table></figure> 结果如下所示： <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-19-27.png" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-25-07.png" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-25-35.png" /></p></li>
</ol>
<p>从nginx的报错信息得到出错的原因是：安装的nginx不支持TLSv1.3，配置文件<code>/etc/nginx/sites-enabled/47.103.0.122.conf</code>有问题。 修改如下： 将<code>/etc/nginx/sites-enabled/47.103.0.122.conf</code>中的<code>ssl_protocols</code>的值修改为 <code>TLSv1.1和TLSv1.2</code> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-39-56.png" alt="配置文件修改" /> 然后重启nginx得到成功结果： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nginx.service</span><br><span class="line">sudo systemctl start nginx.service</span><br><span class="line">sudo systemctl status nginx.service</span><br></pre></td></tr></table></figure> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-47-50.png" alt="nginx启动成功" /> 通过浏览器访问 <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-57-02.png" alt="Firefox提示安全问题" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_16-58-56.png" alt="Chrome提示安全问题" /> 选择高级，同意风险并且继续（继续前往不安全的链接）可以进入首页。 可以创建会议并且其他的人也能够通过ip地址来加入会议，到这里部署就算成功了。</p>
<p>成功运行的测试截图： <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_17-01-26.png" alt="首页" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_17-02-22.png" alt="会议界面（关闭摄像头）" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_17-44-28.png" alt="分享窗口" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_17-45-09.png" alt="设置密码" /> <img src="https://gitee.com/chenryi/image_for_notes/raw/master/jitsimeetingSnipaste_2020-09-27_17-46-00.png" alt="分享链接" /></p>
<p>其中关于安全问题的提示可以考虑参考<a href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart#generate-a-lets-encrypt-certificate-optional-recommended">generate-a-lets-encrypt-certificate-optional-recommended</a>来解决。</p>
<p>另外，如果没有找到相关的配置文件，可以通过复制<code>/usr/share/jitsi-meet-web-config/jitsi-meet.example</code>到<code>/etc/nginx/conf.d/jitsi-meet-ip.conf</code>，并修改配置文件的内容来完成。 修改内容： - 修改<code>ssl_protocols</code>的值为 <code>TLSv1.1和TLSv1.2</code> - 将配置文件中出现的<code>jitsi-meet.example.com</code>修改为ip地址，下面以<code>111.111.111.111</code>为例，包括<code>ssl_certificate，ssl_certificate_key</code>的值。</p>
<p>完整的修改结果如下所示。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_names_hash_bucket_size 64;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    server_name 111.111.111.111;</span><br><span class="line"></span><br><span class="line">    location ^~ &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span><br><span class="line">       default_type &quot;text&#x2F;plain&quot;;</span><br><span class="line">       root         &#x2F;usr&#x2F;share&#x2F;jitsi-meet;</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x3D; &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span><br><span class="line">       return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">       return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    listen [::]:443 ssl;</span><br><span class="line">    server_name 111.111.111.111;</span><br><span class="line"></span><br><span class="line"># Mozilla Guideline v5.4, nginx 1.17.7, OpenSSL 1.1.1d, intermediate configuration</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;  # about 40000 sessions</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age&#x3D;63072000&quot; always;</span><br><span class="line"></span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;prosody&#x2F;certs&#x2F;111.111.111.111.crt;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;prosody&#x2F;certs&#x2F;111.111.111.111.key;</span><br><span class="line"></span><br><span class="line">    root &#x2F;usr&#x2F;share&#x2F;jitsi-meet;</span><br><span class="line"></span><br><span class="line">    # ssi on with javascript for multidomain variables in config.js</span><br><span class="line">    ssi on;</span><br><span class="line">    ssi_types application&#x2F;x-javascript application&#x2F;javascript;</span><br><span class="line"></span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    error_page 404 &#x2F;static&#x2F;404.html;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_types text&#x2F;plain text&#x2F;css application&#x2F;javascript application&#x2F;json image&#x2F;x-icon application&#x2F;octet-stream application&#x2F;wasm;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_proxied no-cache no-store private expired auth;</span><br><span class="line">    gzip_min_length 512;</span><br><span class="line"></span><br><span class="line">    location &#x3D; &#x2F;config.js &#123;</span><br><span class="line">        alias &#x2F;etc&#x2F;jitsi&#x2F;meet&#x2F;111.111.111.111-config.js;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x3D; &#x2F;external_api.js &#123;</span><br><span class="line">        alias &#x2F;usr&#x2F;share&#x2F;jitsi-meet&#x2F;libs&#x2F;external_api.min.js;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #ensure all static content can always be found first</span><br><span class="line">    location ~ ^&#x2F;(libs|css|static|images|fonts|lang|sounds|connection_optimization|.well-known)&#x2F;(.*)$</span><br><span class="line">    &#123;</span><br><span class="line">        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span><br><span class="line">        alias &#x2F;usr&#x2F;share&#x2F;jitsi-meet&#x2F;$1&#x2F;$2;</span><br><span class="line"></span><br><span class="line">        # cache all versioned files</span><br><span class="line">        if ($arg_v) &#123;</span><br><span class="line">          expires 1y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # BOSH</span><br><span class="line">    location &#x3D; &#x2F;http-bind &#123;</span><br><span class="line">        proxy_pass      http:&#x2F;&#x2F;localhost:5280&#x2F;http-bind;</span><br><span class="line">        proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # xmpp websockets</span><br><span class="line">    location &#x3D; &#x2F;xmpp-websocket &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:5280&#x2F;xmpp-websocket?prefix&#x3D;$prefix&amp;$args;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        tcp_nodelay on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;([^&#x2F;?&amp;:&#39;&quot;]+)$ &#123;</span><br><span class="line">        try_files $uri @root_path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @root_path &#123;</span><br><span class="line">        rewrite ^&#x2F;(.*)$ &#x2F; break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;([^&#x2F;?&amp;:&#39;&quot;]+)&#x2F;config.js$</span><br><span class="line">    &#123;</span><br><span class="line">       set $subdomain &quot;$1.&quot;;</span><br><span class="line">       set $subdir &quot;$1&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">       alias &#x2F;etc&#x2F;jitsi&#x2F;meet&#x2F;111.111.111.111-config.js;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #Anything that didn&#39;t match above, and isn&#39;t a real file, assume it&#39;s a room name and redirect to &#x2F;</span><br><span class="line">    location ~ ^&#x2F;([^&#x2F;?&amp;:&#39;&quot;]+)&#x2F;(.*)$ &#123;</span><br><span class="line">        set $subdomain &quot;$1.&quot;;</span><br><span class="line">        set $subdir &quot;$1&#x2F;&quot;;</span><br><span class="line">        rewrite ^&#x2F;([^&#x2F;?&amp;:&#39;&quot;]+)&#x2F;(.*)$ &#x2F;$2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # BOSH for subdomains</span><br><span class="line">    location ~ ^&#x2F;([^&#x2F;?&amp;:&#39;&quot;]+)&#x2F;http-bind &#123;</span><br><span class="line">        set $subdomain &quot;$1.&quot;;</span><br><span class="line">        set $subdir &quot;$1&#x2F;&quot;;</span><br><span class="line">        set $prefix &quot;$1&quot;;</span><br><span class="line"></span><br><span class="line">        rewrite ^&#x2F;(.*)$ &#x2F;http-bind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # websockets for subdomains</span><br><span class="line">    location ~ ^&#x2F;([^&#x2F;?&amp;:&#39;&quot;]+)&#x2F;xmpp-websocket &#123;</span><br><span class="line">        set $subdomain &quot;$1.&quot;;</span><br><span class="line">        set $subdir &quot;$1&#x2F;&quot;;</span><br><span class="line">        set $prefix &quot;$1&quot;;</span><br><span class="line"></span><br><span class="line">        rewrite ^&#x2F;(.*)$ &#x2F;xmpp-websocket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="踩坑记录">踩坑记录</h3>
<ol type="1">
<li><p>完全卸载jitsi-meeting 因为中间出现过问题，考虑过卸载重装，尝试过一次，但是之后安装过程中没有出现输入ip的界面，而且没有自动完成配置文件，所以尝试来全部删除，然后按照上面的方法来完成部署。 jitsi-meeting的卸载 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge jigasi jitsi-meet jitsi-meet-web-config jitsi-meet-prosody jitsi-meet-turnserver jitsi-meet-web jicofo jitsi-videobridge jitsi-videobridge2 prosody nginx</span><br><span class="line"></span><br><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure> 删除全部文件的方法：使用<code>find \ -name jitsi*</code>来查找全部的文件，然后删除。</p></li>
<li><p>nginx启动失败 检查是否是nginx和video-bridge使用的端口的冲突问题，video-bridge先检查443端口，如果被占用则使用4443端口，所以正常启动需要先启动nginx，然后再启动video-bridge，如果是端口占用的问题，先关闭然后再按照顺序启动就可以来。</p></li>
<li><p>配置文件找不到</p></li>
</ol>
<p>可以通过复制<code>/usr/share/jitsi-meet-web-config/jitsi-meet.example</code>到<code>/etc/nginx/conf.d/jitsi-meet-ip.conf</code>，并修改配置文件的内容来完成。 修改内容： - 修改<code>ssl_protocols</code>的值为 <code>TLSv1.1和TLSv1.2</code> - 将配置文件中出现的<code>jitsi-meet.example.com</code>修改为ip地址，下面以<code>111.111.111.111</code>为例，包括<code>ssl_certificate，ssl_certificate_key</code>的值。</p>
]]></content>
  </entry>
  <entry>
    <title>tqdm 使用</title>
    <url>/2021/06/19/tqdm-some-notes/</url>
    <content><![CDATA[<p>tqdm 使用过程中的遇到问题的记录 <a id="more"></a></p>
<p>环境记录： <code>python=3.8, tqdm=4.48.2</code></p>
<h3 id="使用tqdm">使用tqdm</h3>
<p><code>tqdm</code>是一个简单适用的终端进度条python库。 模板如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm </span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(range(<span class="number">100</span>)):              </span><br><span class="line">        sleep(<span class="number">0.1</span>) <span class="comment"># 模拟执行</span></span><br></pre></td></tr></table></figure> 执行上面的命令就会出现一个进度条，如下所示</p>
<pre><code>25%|███████████                       | 25/100 [00:02&lt;00:08,  9.01it/s]</code></pre>
<p>上面的进度条能够显示执行的进展，下面是默认情况下的提示信息含义：</p>
<p>25/100: 已经执行的次数/总共需要执行的次数</p>
<p>00:02&lt;00:08, 9.01it/s : 运行时间 &lt; 估计剩余时间, 每次执行的耗时/秒</p>
<h3 id="遇到问题">遇到问题</h3>
<p>但是运行下面的语句时，进度条的样式不同 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(enumerate(range(<span class="number">100</span>)), total=<span class="number">100</span>):              </span><br><span class="line">        sleep(<span class="number">0.1</span>) <span class="comment"># 模拟执行</span></span><br></pre></td></tr></table></figure> 输出的样式是：</p>
<pre><code>14it [00:01,  8.99it/s]</code></pre>
<p>很显然和上面的不一样，查找后发现问题是tqdm的参数输入在官网上说明的是迭代器类型（实现<code>__next__</code>方法），比如: <code>list, range, range</code> 等，<code>enumerate</code>函数返回的对象也是合法的参数输入，但是前面的类型有一个<code>__len__</code>方法，而<code>enumerate</code>返回的对象没有<code>__len__</code>方法，导致没有办法估计预估执行时间，所以输出的格式和预期不符。</p>
<p>修改方法有2种：</p>
<ul>
<li><p>使用tqdm(enumerate(...), total=...) <code>tqdm</code>提供额外的参数<code>total</code>来处理这种情况。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(enumerate(range(<span class="number">100</span>)), total=<span class="number">100</span>):              </span><br><span class="line">        sleep(<span class="number">0.1</span>) <span class="comment"># 模拟执行</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>使用 enumerate(tqdm(...)) <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in enumerate(tqdm(range(100))):              </span><br><span class="line">        sleep(0.1) # 模拟执行</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h4 id="备注">备注</h4>
<p>关于上面的内容可以查看tqdm的文档，在其中有更多的使用例子。 文档路径： <a href="https://pypi.org/project/tqdm/#convenience-functions">tqdm doc</a> 比如上面的内容可以查看<a href="https://pypi.org/project/tqdm/#faq-and-known-issues">faq-and-known-issues</a>中Wrapping generators的说明。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>tqdm</tag>
      </tags>
  </entry>
  <entry>
    <title>java job interview 20210726</title>
    <url>/2021/07/26/java-job-interview-20210726/</url>
    <content><![CDATA[<p>准备java后端开发面试的问题 <a id="more"></a></p>
<h2 id="java的基本类型string类型stringbuffer和stringbuffer">java的基本类型，String类型，StringBuffer和StringBuffer</h2>
<p>Java提供了8种基本类型：<code>byte, short, int, long, float, double, boolean, char</code></p>
<p>String类是java中创建和操作字符串的类。属于引用类型。是不可变的。 java中不可变对象的定义： （1）类内部所有的字段都是final修饰的。（2）类内部所有的字段都是私有的，也就是被private修饰。（3）类不能够被集成和拓展。（4）类不能够对外提供哪些能够修改内部状态的方法，setter方法也不行。（5）类内部的字段如果是引用，也就是说可以指向可变对象，那我们程序员不能获取这个应用。</p>
<p>String类用final修饰，并且内容的字符串数组也是<code>private final char value[]</code>(java 1.8),java 9之后改为了`<code>private final char value[]</code>，通常情况下是不能进行修改的。</p>
<p>如何通过反射修改String <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line">String str = <span class="string">&quot;aaaaaaa&quot;</span>;</span><br><span class="line">Field field = String.class.getDeclaredField(&quot;value&quot;);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">char</span> [] value = (<span class="keyword">char</span> []) field.get(str);</span><br><span class="line"><span class="comment">// if java &gt;=1.9, using next line.</span></span><br><span class="line"><span class="comment">// byte [] value = (byte []) field.get(str);</span></span><br><span class="line">value[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure> 为什么java中String类型是不可变的： 第一：在Java程序中String类型是使用最多的，这就牵扯到大量的增删改查，每次增删改差之前其实jvm需要检查一下这个String对象的安全性，就是通过hashcode，当设计成不可变对象时候，就保证了每次增删改查的hashcode的唯一性，也就可以放心的操作。 第二：网络连接地址URL,文件路径path通常情况下都是以String类型保存, 假若String不是固定不变的,将会引起各种安全隐患。就好比我们的密码不能以String的类型保存，，如果你将密码以明文的形式保存成字符串，那么它将一直留在内存中，直到垃圾收集器把它清除。而由于字符串被放在字符串缓冲池中以方便重复使用，所以它就可能在内存中被保留很长时间，而这将导致安全隐患。第三：字符串值是被保留在常量池中的，也就是说假若字符串对象允许改变,那么将会导致各种逻辑错误。</p>
<p>StringBuffer和StringBuilder是字符串修改时使用，修改时对对象本身进行操作，不是生成新的对象。 StringBuffer是线程安全的，StringBuilder不是线程安全的（不能同步访问，但是效率更高</p>
<h2 id="反射机制">反射机制</h2>
<h2 id="动态代理模式">动态代理模式</h2>
<ol type="1">
<li>JDK动态代理：利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</li>
<li>CGlib动态代理：利用ASM（开源的Java字节码编辑库，操作字节码）开源包，将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</li>
<li>区别：JDK代理只能对实现接口的类生成代理；CGlib是针对类实现代理，对指定的类生成一个子类，并覆盖其中的方法，这种通过继承类的实现方式，不能代理final修饰的类。</li>
</ol>
<h2 id="java类加载器-双亲委派机制">java类加载器 双亲委派机制</h2>
<p>初始化的时机： 1、遇到new，getstatic、putstatic或者invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用new关键字实例化对象的时候、读取或设置一个类的静态字段（被final修饰、已经在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。 2、使用过Java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。 3、当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。 4、当虚拟机启动时，用户需要指定一个要执行的主类(包含main()方法的那个类)，虚拟机会先初始化这个主类。</p>
<p>不被初始化的例子 通过子类引用父类的静态字段 (父类会被初始化，子类不会被初始化) 通过数组定义引用类 调用类的常量</p>
<p>类加载：指的是.class文件的加载，可能指一个类也可能是一个接口。类加载的过程：加载-&gt;链接（验证，准备，解析）-&gt;初始化。按谁学开始，各阶段是混合交叉进行的。解析比较特殊，为了支持java语言的晚期绑定/动态绑定，有时解析可以在初始化之后才开始。</p>
<p>加载过程： - 通过一个类的全限定名来获取定义此类的二进制流 - 将这个字节流所代表的静态存储结构转化为方法区运行时的数据存储结构 - 在内存中生成一个代表这个类的Class对象，作为这个类的各种数据访问入口 (注意:HotspotVM会把class对象放在方法区中，而不是堆中)</p>
<p>验证： 目的：确保class文件中的字节流符合当前虚拟机的要求，不会危害虚拟机自身的安全。 包括：文件格式验证，元数据验证，字节码验证，符号引用验证</p>
<p>准备： 目的：为类变量分配内存并且设置类变量初始值的阶段，在方法区进行分配。</p>
<p>解析： 虚拟机将常量池内的符号引用替换为直接引用的过程。解析主要包括：1.类或接口的解析 2.字段解析 3.类方法解析 4.接口方法解析</p>
<p>初始化： 类初始化阶段是类加载过程的最后一步，前面类加载的过程中除了在加载阶段用户应用程序可以通过自定义类加载器参与以外，其余动作完全由虚拟机主导与控制。到了初始化阶段，才是真正执行类中定义的Java程序代码。 在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据开发者通过程序控制指定的主观计划去初始化类变量和其他资源。 初始化阶段是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程</p>
<p>类加载器： 虚拟机的设计团队把类加载阶段中的"通过一个类的全限定名来获取描述此类的二进制字节流"这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如果去获取所需要的类。实现这个动作的代码模块称之为类加载器。只有被同一个类加载器加载的类才可能会相等。相同的字节码被不同的类加载器加载的类不相等。</p>
<p>Bootstrap ClassLoader： Java虚拟机的一部分，使用C++编写，没有父类，用于加载java_home下的lib目录下的包，比如：rt.jar（包括java中的各种核心的类，比如java.lang）</p>
<p>Extension ClassLoader： 扩展类加载器，java实现，父类为null，加载lib/ext目录中的类</p>
<p>Application ClassLoader： 系统类加载器，由Java语言实现，父类加载器为扩展类加载器，加载用户路径(ClassPath)上所指定的类库</p>
<p>自定义类加载器： 父类加载器是：<code>AppClassLoader</code>，使用过程中继承<code>AppClassLoader</code>, 重写<code>loadClass()</code>方法，示例化Class对象</p>
<p>双亲委派： 如果一个类加载器收到了类加载请求，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器去完成 每一层的类加载器都把类加载请求委派给父类加载器，直到所有的类加载请求都应该传递给顶层的启动类加载器 如果顶层的启动类加载器加载器无法完成加载请求时，子类加载器尝试去加载，如果连最初发起类加载请求的类加载器也无法完成加载请求时，将会抛出ClassNotFoundException，而不再调用其子类加载器去进行类加载。</p>
<p>特点：java的类加载器一起具备了一种带优先级的层次关系，越是基础的类，越是被上层的类加载器进行加载，保证了Java程序的稳定运行 <img src="https://img-blog.csdn.net/2018072110440555?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0Y2F0c19jbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="类加载器（摘自CSDN）" /></p>
<h2 id="java-class对象">java Class对象</h2>
<p>java有两种对象：实例对象和Class对象。每个类的运行时的类型信息就是用Class对象表示的。它包含了与类有关的信息。其实我们的实例对象就通过Class对象来创建的。Java使用Class对象执行其RTTI（运行时类型识别，Run-Time Type Identification），多态是基于RTTI实现的。 每一个类都有一个Class对象，每当编译一个新类就产生一个Class对象，基本类型，void也有Class对象。 有三种获得Class对象的方式： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)</span><br><span class="line">str.getClass()</span><br><span class="line">String.class</span><br></pre></td></tr></table></figure></p>
<h2 id="java-多态的实现原理">java 多态的实现原理</h2>
<p>多态就是指一个引用变量可以指向该类和该类的子类的对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。 多态存在的三个必要条件 继承，重写，父类引用指向子类对象：Parent p = new Child();</p>
<p>实现方式：重写，接口，抽象类和抽象方法 原理：通过动态绑定实现，主要用到的是Class对象的方法表，在调用某个对象方法时，JVM查找方法表来确定直接引用地址，不同对象会指向不同的方法。</p>
<h2 id="hashmap和concurrentthashmap">HashMap和concurrentthashmap</h2>
<p>由于HashMap是线程不同步的，虽然处理数据的效率高，但是在多线程的情况下存在着安全问题，因此设计了CurrentHashMap来解决多线程安全问题。</p>
<p>HashMap在put的时候，插入的元素超过了容量（由负载因子决定）的范围就会触<strong>发扩容操作</strong>，就是rehash，这个会重新将原数组的内容重新hash到新的扩容数组中，在多线程的环境下，存在同时其他的元素也在进行put操作，如果hash值相同，可能出现同时在同一数组下用链表表示，造成闭环，导致在get时会出现死循环，所以HashMap是线程不安全的。</p>
<p>HashMap的环：若当前线程此时获得ertry节点，但是被线程中断无法继续执行，此时线程二进入transfer函数，并把函数顺利执行，此时新表中的某个位置有了节点，之后线程一获得执行权继续执行，因为并发transfer，所以两者都是扩容的同一个链表，当线程一执行到e.next = new table[i] 的时候，由于线程二之前数据迁移的原因导致此时new table[i] 上就有ertry存在，所以线程一执行的时候，会将next节点，设置为自己，导致自己互相使用next引用对方，因此产生链表，导致死循环。</p>
<p>在JDK1.7版本中，ConcurrentHashMap维护了一个Segment数组，Segment这个类继承了重入锁ReentrantLock，并且该类里面维护了一个 HashEntry&lt;K,V&gt;[] table数组，在写操作put，remove，扩容的时候，会对Segment加锁，所以仅仅影响这个Segment，不同的Segment还是可以并发的，所以解决了线程的安全问题，同时又采用了分段锁也提升了并发的效率。在JDK1.8版本中，ConcurrentHashMap摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作，整个看起来就像是优化过且线程安全的HashMap。</p>
<h2 id="锁机制读写锁-乐观锁-悲观锁-aqs-自旋锁">锁机制，读写锁, 乐观锁, 悲观锁, AQS, 自旋锁</h2>
<p>死锁的条件： 互斥，不可剥夺，请求与保持，循环等待</p>
<figure>
<img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/7f749fc8.png" alt="Java中的锁" /><figcaption aria-hidden="true">Java中的锁</figcaption>
</figure>
<p>悲观锁：总认为最坏的情况可能会出现，它认为数据很可能会被其他人所修改，所以悲观锁在持有数据的时候总会把资源 或者 数据 锁住，这样其他线程想要请求这个资源的时候就会阻塞，直到等到悲观锁把资源释放为止。<code>Synchronized, ReentrantLock</code>等独占锁就是一种悲观锁的实现。</p>
<p>乐观锁：总认为资源和数据不会被别人所修改，所以读取不会上锁。乐观锁多适用于多读的应用类型，这样可以提高吞吐量。 实现方案一般来说有两种：版本号机制 和 CAS实现。 <code>java.util.concurrent.AtomicInteger</code>是CAS的一种实现。 属于自选锁的一种，失败触发等待重试机制。</p>
<p>没有获取到锁的线程通常有两种处理方式：一种是没有获取到锁的线程就一直循环等待判断该资源是否已经释放锁，这种锁叫做自旋锁，它不用将线程阻塞起来(NON-BLOCKING)；还有一种处理方式就是把自己阻塞起来，等待重新调度请求，这种叫做互斥锁。</p>
<p>自旋锁：当一个线程尝试去获取某一把锁的时候，如果这个锁此时已经被别人获取(占用)，那么此线程就无法获取到这把锁，该线程将会等待，间隔一段时间后会再次尝试获取。这种采用循环加锁 -&gt; 等待的机制被称为自旋锁(spinlock) 自旋锁避免了操作系统进程调度和线程切换，所以自旋锁通常适用在时间比较短的情况下。由于这个原因，操作系统的内核经常使用自旋锁。无法保证多线程竞争的公平性</p>
<p>AQS是将每一条请求共享资源的线程封装成一个CLH锁队列（虚拟的双向队列）的一个结点（Node），来实现锁的分配。 AQS就是基于CLH队列，用volatile修饰共享变量state，线程通过CAS去改变状态符，成功则获取锁成功，失败则进入等待队列，等待被唤醒。</p>
<p>读写锁： <code>ReetrantReadWriteLock</code>，包括<code>readLock(), writeLock()</code>返回Lock对象，一个只用于读操作，一个只用于写操作，允许多个程序进行读，写锁是独占的。当有读锁时，写锁就不能获得；而当有写锁时，除了获得写锁的这个线程可以获得读锁外，其他线程不能获得读锁</p>
<h2 id="synchronized-volatile关键字-lock接口-reentrantlock类-cas的含义和问题">Synchronized, volatile关键字, Lock接口, ReentrantLock类, cas的含义和问题</h2>
<p>java 锁是基于对象的。 synchronized锁的升级： 无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁 偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p>
<p>synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的。 Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。 Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步（重量级锁）。JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”</p>
<p>volatile在多处理器开发中保证了共享变量的“ 可见性”。可见性的意思是当一个线程修改一个共享变量时（写回主内存），另外一个线程能读到这个修改的值。(共享内存，私有内存)</p>
<p>CAS是英文单词CompareAndSwap的缩写，中文意思是：比较并替换。CAS需要有3个操作数：内存地址V，旧的预期值A，即将要更新的目标值B。CAS指令执行时，当且仅当内存地址V的值与预期值A相等时，将内存地址V的值修改为B，否则就什么都不做。整个比较并替换的操作是一个原子操作。如 Intel 处理器，比较并交换通过指令的 cmpxchg 系列实现。 ABA问题： 如果在这段期间它的值曾经被改成了B，后来又被改回为A，那CAS操作就会误认为它从来没有被改变过。Java并发包为了解决这个问题，提供了一个带有标记的原子引用类“AtomicStampedReference”，它可以通过控制变量值的版本来保证CAS的正确性。</p>
<h2 id="java的线程模型">java的线程模型</h2>
<p>Java默认使用的是一对一模型。轻量级进程（LWP），系统提供给用户的操作内核线程的接口的实现。即轻量级进程是内核线程的一个替身。每个LWP都是独立的调度单元，一个线程阻塞不影响其他线程。Java采用抢占式调度。同时Java定义了线程优先级。可以在一定程度上调整线程的CPU时间。Java采用的是共享内存并发模型。</p>
<p>Java内存模型（JMM）中，可以将虚拟机内存划分为两部分内存：主内存和线程工作内存，主内存是多个线程共享的内存，线程工作内存是每个线程独享的内存。 Java内存模型定义了8种原子操作，此外Java内存模型还保证了对于基本数据类型（char、boolean、int等）的操作是原子性的。对于其他类型的数据如若需要更灵活的原子性操作，Java内存模型提供了lock和unlock操作。JVM中使用的两个字节码指令monitorenter和monitorexit即是通过lock和unlock操作来实现的，常使用的synchronized关键字转换成字节码指令后即由monitorenter和monitorexit构成。</p>
<p>Java内存模型规定<strong>所有的变量都存储在主内存</strong>中，包括实例变量，静态变量，但是不包括局部变量和方法参数。每个线程都有自己的工作内存，<strong>线程的工作内存保存了该线程用到的变量和主内存的副本拷贝，线程对变量的操作都在工作内存中进行，不能直接读写主内存中的变量</strong>。当线程改变工作内存某个变量值的时候，会写回主内存中的值，主内存通过<strong>volatile关键字</strong>通知其他含有该变量的线程。整个Java内存模型实际上是围绕着三个特征建立起来的。分别是：<strong>原子性，可见性，有序性</strong>。这三个特征可谓是整个Java并发的基础。</p>
<h2 id="java内存区域划分">java内存区域划分</h2>
<ol type="1">
<li>程序计数器 程序计数器是线程私有的内存区域，唯一一个没有规定任何OutOfMemoryError情况的区域</li>
<li>Java虚拟机栈 线程私有的 Java方法执行的内存模型：每个方法执行的同时会创建一个栈帧，栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程</li>
<li>本地方法栈 本地方法栈为虚拟机使用到的Native方法服务</li>
<li>Java堆 所有的线程共享的一块内存区域，在虚拟机启动时创建，是垃圾回收器管理的主要区域。 Java堆的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</li>
<li>方法区 线程共享的一块内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。 <em>运行时常量池</em>，具备动态性，String类的intern()方法，将新的常量放入池中</li>
</ol>
<h2 id="java-gc">java GC</h2>
<p>垃圾回收算法： 1. 停止-复制：先暂停程序的运行,然后将所有存活的对象从当前堆复制到另一个堆,没有被复制的对象全部都是垃圾。当对象被复制到新堆时,它们是一个挨着一个的,所以新堆保持紧凑排列,然后就可以按前述方法简单,直接的分配了。缺点是一浪费空间,两个堆之间要来回倒腾,二是当程序进入稳定态时,可能只会产生极少的垃圾,甚至不产生垃圾,尽管如此,复制式回收器仍会将所有内存自一处复制到另一处。 2. 标记-清除：同样是从堆栈和静态存储区出发,遍历所有的引用,进而找出所有存活的对象。每当它找到一个存活的对象,就会给对象一个标记,这个过程中不会回收任何对象。只有全部标记工作完成的时候,清理动作才会开始。在清理过程中,没有标记的对象会被释放,不会发生任何复制动作。所以剩下的堆空间是不连续的,垃圾回收器如果要希望得到连续空间的话,就得重新整理剩下的对象。 3. 标记-整理：它的第一个阶段与标记/清除算法是一模一样的，均是遍历GC Roots，然后将存活的对象标记。移动所有存活的对象，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。 4. 分代收集算法：把Java堆分为新生代和老年代，然后根据各个年代的特点采用最合适的收集算法。新生代中，对象的存活率比较低，所以选用复制算法，老年代中对象存活率高且没有额外空间对它进行分配担保，所以使用“标记-清除”或“标记-整理”算法进行回收。</p>
<p>Minor GC和Full GC触发条件 * Minor GC触发条件：当Eden区满时，触发Minor GC。 * Full GC触发条件： 1. 调用System.gc时，系统建议执行Full GC，但是不必然执行 2. 老年代空间不足 3. 方法区空间不足 4. 通过Minor GC后进入老年代的平均大小大于老年代的可用内存 5. 由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</p>
<p>GC Roots 1. 虚拟机栈（栈帧中的本地变量表）中引用的对象。 2. 方法区中类静态属性引用的对象。 3. 方法区中常量引用的对象。 4. 本地方法栈中JNI（即一般说的Native方法）引用的对象。 CMS的执行过程 1. 初始标记(STW initial mark)：这个过程从垃圾回收的"根对象"开始，只扫描到能够和"根对象"直接关联的对象，并作标记。所以这个过程虽然暂停了整个JVM，但是很快就完成了。 2. 并发标记(Concurrent marking)：这个阶段紧随初始标记阶段，在初始标记的基础上继续向下追溯标记。并发标记阶段，应用程序的线程和并发标记的线程并发执行，所以用户不会感受到停顿。 3. 并发预清理(Concurrent precleaning)：并发预清理阶段仍然是并发的。在这个阶段，虚拟机查找在执行并发标记阶段新进入老年代的对象(可能会有一些对象从新生代晋升到老年代， 或者有一些对象被分配到老年代)。通过重新扫描，减少下一个阶段"重新标记"的工作，因为下一个阶段会Stop The World。 4. 重新标记(STW remark)：这个阶段会暂停虚拟机，收集器线程扫描在CMS堆中剩余的对象。扫描从"跟对象"开始向下追溯，并处理对象关联。 5. 并发清理(Concurrent sweeping)：清理垃圾对象，这个阶段收集器线程和应用程序线程并发执行。 6. 并发重置(Concurrent reset)：这个阶段，重置CMS收集器的数据结构状态，等待下一次垃圾回收。</p>
<h2 id="java的线程池">java的线程池</h2>
<p>线程池的优点： 1. 减少创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。 2. 可以根据系统的承受能力，调整线程池中工作线程的数目，放置因为消耗过多的内存，而把服务器累趴下。</p>
<p>核心线程池ThreadPoolExecutor内部参数 1. corePoolSize：指定了线程池中的线程数量 2. maximumPoolSize：指定了线程池中的最大线程数量 3. keepAliveTime：线程池维护线程所允许的空闲时间 4. unit: keepAliveTime 的单位。 5. workQueue：任务队列，被提交但尚未被执行的任务。 6. threadFactory：线程工厂，用于创建线程，一般用默认的即可。 7. handler：拒绝策略。当任务太多来不及处理，如何拒绝任务。</p>
<p>线程池的执行流程 1. 如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务 2. 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列 3. 如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务 4. 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常RejectExecutionException</p>
<p>线程池的工作队列: 1. ArrayBlockingQueue：底层是数组，有界队列，如果我们要使用生产者-消费者模式，这是非常好的选择。 2. LinkedBlockingQueue：底层是链表，可以当做无界和有界队列来使用，所以大家不要以为它就是无界队列。 3. SynchronousQueue：本身不带有空间来存储任何元素，使用上可以选择公平模式和非公平模式。 4. PriorityBlockingQueue：无界队列，基于数组，数据结构为二叉堆，数组第一个也是树的根节点总是最小值。</p>
<h2 id="spring-ioc-和aop的理解">Spring IOC 和AOP的理解</h2>
<p>控制反转（IoC）和面向切面编程（AOP） IoC就是对象的创建，依赖都由Spring及配置文件控制 AOP就是统一的给一些类似的方法加上同样的功能，比如日志，事务。 IOC就是典型的工厂模式，通过sessionfactory去注入实例。 AOP就是典型的代理模式的体现。</p>
<h2 id="设计模式springboot中的设计模式">设计模式，SpringBoot中的设计模式</h2>
<pre><code>工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；

单例模式：Bean默认为单例模式。

代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；

模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。

观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如Spring中listener的实现–ApplicationListener。</code></pre>
<h2 id="单例模式">单例模式</h2>
<p>参考<a href="https://www.runoob.com/design-pattern/singleton-pattern.html">单例模式</a></p>
<p>饿汉式，多线程安全，类加载时就初始化，Lazy初始化：否 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>双重校验锁 多线程安全，Lazy初始化：是 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>( Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        retunr singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 枚举 Lazy初始化：否，多线程初始化：是 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pubic <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="事务机制和springbootmysql数据库中的实现和底层原理">事务机制和SpringBoot,Mysql数据库中的实现和底层原理</h2>
<p>参考： <a href="https://www.runoob.com/java/java-basic-datatypes.html">菜鸟教程</a> <a href="https://zhuanlan.zhihu.com/p/75577371">知乎专栏：面试必问：Java中String类型为什么设计成不可变的？</a> <a href="https://www.w3cschool.cn/java/java-reflex.html">w3cschool.cn</a> <a href="https://zhuanlan.zhihu.com/p/44670213">知乎专栏：Java虚拟机——类加载机制和类加载器</a> <a href="https://www.runoob.com/design-pattern/singleton-pattern.html">单例模式</a> <a href="https://blog.csdn.net/itcats_cn/article/details/81128783">CSDN itcats_cn</a> <a href="https://mp.weixin.qq.com/s?__biz=MzkwMDE1MzkwNQ==&amp;mid=2247496062&amp;idx=1&amp;sn=c04e0b83f38c45d06538ebac69529ee1&amp;source=41#wechat_redirect">看完你就应该能明白的悲观锁和乐观锁</a> <a href="https://www.cnblogs.com/cxuanBlog/p/11679883.html">看完你就明白的锁系列之自旋锁</a> <a href="https://tech.meituan.com/2018/11/15/java-lock.html">不可不说的Java“锁”事</a> <a href="https://www.jianshu.com/p/c77f6d22d212">Java线程模型</a> <a href="https://www.cnblogs.com/jqctop1/p/9538316.html">Java 线程模型</a> <a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html">新一代垃圾回收器ZGC的探索与实践</a> <a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html">Java中9种常见的CMS GC问题分析与解决</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
